# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
#
:: default : yabai -m config top_padding 10 && yabai -m config bottom_padding 10 && yabai -m config left_padding 10 && yabai -m config right_padding 10 && yabai -m config window_gap 10

:: swap @ : yabai -m config top_padding    20 && yabai -m config bottom_padding 20 && yabai -m config left_padding   20 && yabai -m config right_padding  20 && yabai -m config window_gap     20

# enter swap mode (used for moving window positions)
shift + cmd + alt + ctrl - g; swap

# set window positions (leave swap mode)
swap < escape; default
swap < return; default

shift + cmd + alt + ctrl - f : yabai -m window --toggle zoom-fullscreen

# focus window
shift + cmd + alt + ctrl - h : yabai -m window --focus west \
  || yabai -m display --focus $($HOME/.yabai-get-display-index prev)
shift + cmd + alt + ctrl - l : yabai -m window --focus east \
  || yabai -m display --focus $($HOME/.yabai-get-display-index next)
shift + cmd + alt + ctrl - j : yabai -m window --focus south
shift + cmd + alt + ctrl - k : yabai -m window --focus north

# swap managed window
#
# Attempt to swap window to west position...
# ...if swapping to west exits with error then move window to prev
# display and focus that display so that windows seemlessly move
# across horizontally across monitors.
swap < h : yabai -m window --swap west \
  || {\
      yabai -m window --display $($HOME/.yabai-get-display-index prev); \
      yabai -m display --focus $($HOME/.yabai-get-display-index prev); \
     }

# Attempt to swap window to east position...
# ...if swapping to east exits with error then move window to next
# display and focus that display so that windows seemlessly move
# across horizontally across monitors.
swap < l : yabai -m window --swap east \
  || {\
      yabai -m window --display $($HOME/.yabai-get-display-index next); \
      yabai -m display --focus $($HOME/.yabai-get-display-index next); \
     }

swap < j : yabai -m window --swap south
swap < k : yabai -m window --swap north

# toggle between vertical and horizontal split
shift + cmd + alt + ctrl - o : yabai -m window --toggle split
