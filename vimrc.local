" This file contains personal (local) overrides for thoughtbots default
" dotfiles configuration config: https://github.com/thoughtbot/dotfiles

" quick `roll` ESC
imap kj <Esc>
imap jk <Esc>
vmap kj <Esc>
vmap jk <Esc>

" override thoughtbot's 80 column width marker
set colorcolumn=

" line number relative to current cursor position
set relativenumber

" jump to beginning of line text instead of actual line begin
nmap 0 ^

" move down/up single line if line is wrapped
nmap k gk
nmap j gj

" map Ctrl-Shift-I to Prettier like VS Code
nmap <C-i> :Prettier<CR>
nmap <C-y> :CocCommand eslint.executeAutofix<CR>

" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

""""""""""""" Color Schemes  """"""""""""""""""
set termguicolors
" colorscheme onedark
" colorscheme pt_black
colorscheme monokai
" colorscheme night-owl

hi CocErrorFloat ctermfg=White guifg=#ff4040

" remove theme background to use terminal theme background color
hi Normal guibg=NONE ctermbg=NONE
hi SignColumn guibg=NONE ctermbg=NONE
hi LineNr guibg=NONE ctermbg=NONE
hi CursorLineNr guibg=NONE ctermbg=NONE
" set ag (the silver surfer) as ack.vim search library
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" markdown preview hotkey
let vim_markdown_preview_hotkey='<C-q>'
" default chrome for markdown preview
let vim_markdown_preview_browser='Google Chrome'
" use grip for GitHub style markdown preview
let vim_markdown_preview_github=1

" sets each level of indentation to different line type
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

"""""""" Vim lightline   """""

let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'mode_map': { 'c': 'NORMAL'  },
    \ 'active': {
    \   'left': [ [ 'mode', 'paste'  ], [ 'filename'  ]  ]
    \ },
    \ 'component_function': {
    \   'modified': 'LightlineModified',
    \   'readonly': 'LightlineReadonly',
    \   'filename': 'LightlineFilename',
    \   'fileformat': 'LightlineFileformat',
    \   'filetype': 'LightlineFiletype',
    \   'fileencoding': 'LightlineFileencoding',
    \   'mode': 'LightlineMode',
    \ },
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2"  },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3"  }
    \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '♤ ' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ ('' != expand('%:f') ? expand('%:f') : '[New File]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

" NORMAL / INSERT / VISUAL
function! LightlineMode()
  return winwidth(0) > 40 ? lightline#mode() : ''
endfunction

" javascript.jsx
function! LightlineFiletype()
  return winwidth(0) > 100 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

"   " utf-8
function! LightlineFileencoding()
  return winwidth(0) > 80 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

"" unix
function! LightlineFileformat()
  return winwidth(0) > 120 ? &fileformat : ''
endfunction

let g:lightline.enable = {
  \   'tabline': 1
  \ }

function! ResizeCmdHeight()
  if &columns < 90
    set cmdheight=2
  else
    set cmdheight=1
  endif
endfunction

augroup ResizeCmdOnVimResized
  autocmd!
  autocmd VimResized * call ResizeCmdHeight()
augroup END

highlight LineNr ctermfg=grey

autocmd BufNewFile,BufRead *.js set filetype=javascript.jsx
autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx

" Disbale ALE linting server from Thoughtbot dotfiles so that CoC can act as the
" primary linting
let g:ale_enabled = 0

" " COC {{{  Language Server Protocal, completion,
let g:coc_global_extensions = ['coc-tsserver', 'coc-eslint', 'coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-yank', 'coc-prettier', 'coc-pairs']

" set Pretter command for coc-prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

